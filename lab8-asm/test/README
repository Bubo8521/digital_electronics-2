
This directory is intended for PlatformIO Test Runner and project tests.

Unit Testing is a software testing method by which individual units of
source code, sets of one or more MCU program modules together with associated
control data, usage procedures, and operating procedures, are tested to
determine whether they are fit for use. Unit testing finds problems early
in the development cycle.

More information about PlatformIO Unit Testing:
- https://docs.platformio.org/en/latest/advanced/unit-testing/index.html

4. Go through the `main.c` file and make sure you understand each line. Use **AVR® Instruction Set Manual** from Microchip [Online Technical Documentation](https://onlinedocs.microchip.com/), find the description of instructions used in `mac.S`, and complete the table.

   | **Instruction** | **Operation** | **Description** | **Cycles** |
   | :-- | :-: | :-- | :-: |
   | `add Rd, Rr` | `Rd ← Rd + Rr` | `Adds two registers without the C Flag and places the result in the destination register Rd.` | `1` |
   | `mul Rd, Rr` | `R1:R0 ← Rd × Rr` | `This instruction performs 8-bit × 8-bit → 16-bit unsigned multiplication.` | `1` |
   | `ret` | `PC(15:0) ← STACK` | `Returns from subroutine. The return address is loaded from the STACK. The Stack Pointer uses a preincrement scheme during RET.` | `4` |

5. Use manual's 16-bit Opcodes and convert used instructions to hexadecimal.

   | **Instruction** | **Binary opcode** | **Hex opcode** | **Compiler Hex opcode** |
   | :-- | :-: | :-: | :-: |
   | `add r24, r0` | `0000 1101 1000 0000` | `0D 80` | `80 0D` |
   | `mul r22, r20` | `1001 1111 0110 0100` | `9F 64` | `64 9F` |
   | `ret` | `1001_0101_0000_1000` | `95 08` | `08 95` |

1. Consider a 4-bit shift register whose input (LSB bit) is formed by an XNOR gate with taps [4, 3] and the initial value is 0000 [[5]](https://www.edn.com/tutorial-linear-feedback-shift-registers-lfsrs-part-1/). Explore LFSR algorithm within `lfsr4_fibonacci_asm` assembly function, complete Timer1 overflow handler and generate 4-bit pseudo-random sequences for different Tap positions. How many states are generated for every settings?

   ![LFSR generation algo](images/flowchart_lfsr-value_algo.png)

   | **Tap position** | **Generated values** | **Length** |
   | :-: | :-- | :-: |
   | 4, 3 | 0 1 3 7 14 13 11 6 12 9 2 5 10 4 8 | 15 |
   | 4, 2 | 0 1 3 6 12 8 | 6 |
   | 4, 1 | 0 1 2 5 10 4 9 3 6 13 11 7 14 12 8 | 15 |

   2. Change [LFSR tap positions](https://courses.cs.washington.edu/courses/cse369/15au/labs/xapp052_LFSRs.pdf) in `lfsr4_fibonacci_asm` function and generate 5-, 6-, and 7-bit versions of pseudorandom sequence. Do not forget to change the binary mask used to clear unused bits in input/output register.

   | **Tap position** | **Length** |
   | :-: | :-: |
   | 5, 4 | 8 |
   | 6, 5 |  |
   | &nbsp; |  |
